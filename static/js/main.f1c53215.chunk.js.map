{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","App","useMemo","Header","accessor","setData","useEffect","a","axios","result","docs","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAGe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EACTC,mBAAS,IADA,mBACxCC,EADwC,KAC3BC,EAD2B,OAU3CC,YACF,CACEL,UACAC,QAEFK,IACAC,KAZAC,EAJ6C,EAI7CA,cACAC,EAL6C,EAK7CA,kBACAC,EAN6C,EAM7CA,aACAC,EAP6C,EAO7CA,KACAC,EAR6C,EAQ7CA,WACAC,EAT6C,EAS7CA,UAiBF,OACE,oCACE,2BACEC,MAAOX,EACPY,SAXqB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,YAAaC,GACvBV,EAAeU,IASXK,YAAa,iBAEf,0BAAWX,IACT,+BACGE,EAAaU,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,wCACMA,EAAOC,eAAeD,EAAOE,wBADnC,CAEEC,UACEH,EAAOI,SACHJ,EAAOK,aACL,YACA,WACF,KAGLL,EAAOM,OAAO,mBAMzB,0BAAWrB,IACRE,EAAKS,KAAI,SAACW,EAAKC,GAEd,OADApB,EAAWmB,GAET,uBAAQA,EAAIE,cACTF,EAAIG,MAAMd,KAAI,SAAAe,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKL,OAAO,mB,MCC/CO,MA7Cf,WACE,IAAMrC,EAAUsC,mBACd,iBAAM,CACJ,CACEC,OAAQ,QACRvC,QAAS,CACP,CACEuC,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,SACRC,SAAU,kBAEZ,CACED,OAAQ,cACRC,SAAU,WAEZ,CACED,OAAQ,iBACRC,SAAU,wBAKlB,IAzBW,EA4BWtC,mBAAS,IA5BpB,mBA4BND,EA5BM,KA4BAwC,EA5BA,KAsCb,OARAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEACsBC,IAAM,yDAD5B,OACOC,EADP,OAGCJ,EAAQI,EAAO5C,KAAK6C,MAHrB,0CAAD,KAKC,IAGD,yBAAKnB,UAAU,OACb,kBAAC5B,EAAD,CAAOC,QAASA,EAASC,KAAMA,MChDjB8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStB,OAAO,kBAAC,EAAD,MAASuB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1c53215.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setFilter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  const handleFilterChange = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"show.name\", value);\r\n    setFilterInput(value);\r\n  };\r\n\r\n  // Render the UI for table\r\n  return (\r\n    <>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Search title\"}\r\n      />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Table from \"./Table\";\r\nimport \"./App.css\";\r\n\r\nconst Genres = ({ values }) => {\r\n  return (\r\n    <>\r\n      {values.map((genre, idx) => {\r\n        return (\r\n          <span key={idx} className=\"badge\">\r\n            {genre}\r\n          </span>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Books\",\r\n        columns: [\r\n          {\r\n            Header: \"Title\",\r\n            accessor: \"title\"\r\n          },\r\n          {\r\n            Header: \"Author\",\r\n            accessor: \"author_name[0]\"\r\n          },\r\n          {\r\n            Header: \"Book Cover \",\r\n            accessor: \"cover_i\"\r\n          },\r\n          {\r\n            Header: \"Published Date\",\r\n            accessor: \"publish_date[0]\"\r\n          }\r\n        ]\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await axios(\"http://openlibrary.org/search.json?q=the+great+gatsby\");\r\n      //const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\r\n      setData(result.data.docs);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table columns={columns} data={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}